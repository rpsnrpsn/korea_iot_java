package org.example.Test0710;

public class 자바기초용어모음 {
}


/*
접근제한자
: // 클래스, 변수, 메서드 접근 범위 설정, 캡슐화 구현, 외부로부터 코드 보호
- public: 같은 패키지 내 // 모든 패키지 내
- protected: // 같은 패키지 내 모든 클래스
- default: 같은 클래스 내 // 같은 패키지 내 모든 클래스, 키워드 직접 명시x
- private: // 같은 클래스 내

static ??
: //
- static 변수: //
- static 메서드: //

final
: 불변성 // 변수, 메서드, 클래스에서 사용 가능
- final 변수: // 상수 지정, 선언과 동시에 초기화, 재할당 불가능
- final 메서드: // 자식 클래스에서 오버라이딩(재정의)할 수 없는 메서드
- final 클래스: // 상속될 수 없는 클래스 선언

super VS this
- this: 자식 클래스 호출 // 현재 객체 자기 자신
- super: 부모 클래스 호출 // 부모 클래스로 생성된 객체 그 자체

오버로딩 VS 오버라이딩
- 오버로딩: // 중복 정의, 한 클래스 내에서 동일한 이름의 '메서드'를 여러 개 정의하는 것
- 오버라이딩: 상속 때 사용 // 자식 클래스가 부모 클래스에서 상속받은 '메서드'를
                            자신의 상황에 맞게 '재정의'

abstract
: // 추상화
- abstract 클래스: // 미완성 클래스(설계도), 일부 구현이 누락된 불완전한 클래스,
                    다른 클래스가 상속받아 완성해야만 사용 가능
- abstract 메서드: // 메서드의 선언부만 존재함, 구현부가 없는 메서드,
                    자식 클래스에서 해당 메서드를 반드시 구현하도록 강제하는 역할,
                    추상 메서드는 반드시 재정의 해야함

interface VS abstract class
- interface: // 객체가 어떤 방식으로 동작해야 하는지 정의하는 추상 타입,
                클래스의 행동을 정의, 객체가 해야할 동작(행위)를 정의한 약속

- abstract class: // 공통적인 기능을 제공하는 '부분적 구현',
                     기본 구현을 제공 & 확장 가능

extends VS implements
- extends: 상속 // 클래스를 상속받을 때 사용, 부모 클래스의 필드와 메서드를 물려받음
                    단일 상속만 가능(부모 클래스 하나만 상속)
- implements: // 인터페이스를 구현할 때 사용,
                    여러 개의 인터페이스를 동시에 구현 가능 (다중 구현)

try-catch-finally
- try: // try {
         예외가 발생할 수 있는 코드
- catch: // catch('발생할 예외의 타입' '예외를 저장할 변수') {
            해당 예외 발생 시 실행할 코드 }
- finally: // finally {
             예외 발생 여부와 상관없이 항상 실행되는 코드 블록 }
*/